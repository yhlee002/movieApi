# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test:
    env: 
      FLYWAYHUB_ACCESS_TOKEN: ${{ secrets.SECRET_ACCESS_KEY }}
    runs-on: ubuntu-latest
    services:
      mysql:
        image: bitnami/mysql:8.0.20
        env:
          MYSQL_DATABASE: moviesite
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_TEST_PASSWORD }}
          MYSQL_AUTHENTICATION_PLUGIN: mysql_native_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=3
        volumes:
          - ./dbdata:/var/lib/mysql/
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flyway
        uses: joshuaavalon/flyway-action@v3.0.0
        with:
          url: jdbc:mysql://mysql:3306/moviesite?allowPublicKeyRetrieval=true&useSSL=false
          user: ${{ secrets.DB_TEST_USERNAME }}
          password: ${{ secrets.DB_TEST_PASSWORD }}
          locations: filesystem:db, filesystem:db/migration
          # default: filesystem:sql
        
      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          java-version: 17
          distribution: 'temurin'
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - run: mkdir -p ./src/test/resources
      - run: ls -al ./src/test
      
      # Make git repository's secret -> application.yml file
      - name: Make application.yml
        run: echo "${{ secrets.APPLICATION_YML }}" > ./src/test/resources/application.yml

      - name: Make Res_ko_KR_keys.properties
        run: echo "${{ secrets.Res_ko_KR_keys }}" > ./src/test/resources/Res_ko_KR_keys.properties
        
      - name: Test with Gradle
        run: ./gradlew test
      
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      AWS_REGION: ap-northeast-2
      S3_BUCKET_NAME: project-moviesite
    steps:
      # checkout
      - name: Checkout
        uses: actions/checkout@v4

      # Setup JDK
      - name: Setup Java JDK
        uses: actions/setup-java@v4.2.1
        with:
          java-version: 17
          distribution: 'temurin'
      
      # Setup Gradle
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
        
      # Make git repository's secret -> application.yml file
      - name: Make application.yml
        run: echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: Make Res_ko_KR_keys.properties
        run: echo "${{ secrets.Res_ko_KR_keys }}" > ./src/main/resources/Res_ko_KR_keys.properties

      # Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Build
      - name: Build with Gradle Wrapper
        run: ./gradlew clean build -Pprofile=prod -x test

      # Make Directory
      - name: Make Directory
        run: mkdir -p deploy

      # Copy Jar file
      - name: Copy Jar
        run: cp ./build/libs/moviesite_api_server.jar ./deploy

      - run: mkdir -p ./deploy
      - run: cp ./scripts/deploy.sh ./deploy
      - run: cp ./appspec.yml ./deploy

      # Make Zip file
      - name: Make zip file
        run: tar cvf ./moviesite-api-$GITHUB_SHA.zip ./deploy

      # Access to AWS
      - name: Configure AWS Credentials for GitHub Actions
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SECRET_ACCESS_KEY }}

      # Upload to S3
      - name: Upload to S3
        run: aws s3 cp --region $AWS_REGION --acl private ./moviesite-api-$GITHUB_SHA.zip s3://$S3_BUCKET_NAME/moviesite-api-$GITHUB_SHA

      # Deploy with CodeDeploy
      - name: CodeDeploy
        env:
          CODEDEPLOY_NAME: MovieSite
          CODEDEPLOY_GROUP: moviesite-group
        # run: aws deploy create-deployment --application-name $CODEDEPLOY_NAME \
        #   --deployment-config-name CodeDeployDefault.AllAtOnce \
        #   --deployment-group-name $CODEDEPLOY_GROUP \
        #   --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=moviesite-api-$GITHUB_SHA.zip
        run: aws deploy create-deployment --application-name $CODEDEPLOY_NAME --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name $CODEDEPLOY_GROUP --s3-location bucket=$S3_BUCKET_NAME,bundleType=zip,key=moviesite-api-$GITHUB_SHA
          

  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          
      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
