plugins {
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.sonarqube' version '4.0.0.2929'
    id 'com.diffplug.spotless' version '6.12.0'
}

group = 'com.portfolio.younghyun'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5:3.0.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'mysql:mysql-connector-java:8.0.33'
    implementation 'org.springframework:spring-context-support:6.1.6'
    implementation 'jakarta.servlet:jakarta.servlet-api:6.0.0'
    implementation 'jakarta.mail:jakarta.mail-api:2.1.3'
    implementation 'org.eclipse.angus:jakarta.mail:2.0.3'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
    implementation 'com.google.code.gson:gson:2.9.1'
    implementation 'dev.akkinoc.util:yaml-resource-bundle:2.12.3'
    implementation 'net.nurigo:javaSDK:2.2'
    implementation 'com.vonage:client:6.2.0'
    compileOnly 'org.projectlombok:lombok'
//    compile 'io.jsonwebtoken:jjwt-api:0.11.2'
//    runtime 'io.jsonwebtoken:jjwt-impl:0.11.2',
//            'io.jsonwebtoken:jjwt-jackson:0.11.2'
    implementation 'org.webjars:bootstrap:4.5.2'
    implementation 'org.webjars:jquery:3.5.1'
    implementation 'org.webjars:font-awesome:5.15.0'
    implementation 'org.webjars:webjars-locator-core:0.46'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation 'com.tngtech.archunit:archunit:1.1.0'
    testImplementation "org.testcontainers:testcontainers:1.19.0"
    annotationProcessor 'org.projectlombok:lombok'
    /* libs 디렉토리의 모든 라이브러리 의존성 추가 */
//    compile fileTree(dir: 'libs', include: ['*.jar'])
}

jacoco {
    toolVersion = "0.8.8";
}

tasks.named("test") {
    useJUnitPlatform()

    jacoco {}
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
        csv.required = false

        xml.destination(file("build/jacoco/jacoco.xml"))
        html.destination(file("build/jacoco/jacoco.html"))
    }
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            enabled = true
            element = "CLASS"

            // line coverage가 50% 이상이어야 한다.
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = BigDecimal.valueOf(0.5) // 최솟값
            }

            // total line이 최대 100줄이다. (=한 클래스는 100줄 이상의 소스 코드를 가질 수 없다.)
            limit {
                counter = "LINE"
                value = "TOTALCOUNT"
                maximum = BigDecimal.valueOf(100) // 최댓값
            }

            excludes = List.of(
                    "*.controller.*",
                    "com.portfolio.demo.project.ProjectApplication",
                    // 컨트롤러와 메인함수가 있는 클래스는 커버리지 검사 제외
            )
        }
    }
}

sonar {
    properties {
        property("sonar.host.url", "http://localhost:9000")
        property("sonar.login", "sqp_c3256f1babeaeff69b6d09de0d54166d3a655ffd")
        property("sonar.sources", "src/main/java")
        property("sonar.tests", "src/test/java")
        property("sonar.sourceEncoding", "UTF-8")
        property("sonar.projectKey", "moviesite")
        property("sonar.projectName", "moviesite")
        property("sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/jacoco.xml")
    }
}

spotless {
    java {
        googleJavaFormat()

        removeUnusedImports() // 사용하지 않는 import 제거
//        trimTrailingWhitespace() // 공백이 2칸이상 존재하거나, 앞 뒤로 불필요한 공백 존재시 제거
        indentWithSpaces(4) // 들여쓰기가 탭이 아닌 띄어쓰기(4칸)으로 변경
        endWithNewline() // 마지막 줄을 공백으로 종료
    }
}

tasks.register("addGitPreCommitHook", Copy) {
    from "script/pre-commit"
    into ".git/hooks"
}